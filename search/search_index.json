{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pytest_cache_assert \u2693\ufe0e Cache assertion data to simplify regression testing of complex serializable data Installation \u2693\ufe0e poetry add pytest_assert_check --dev Usage \u2693\ufe0e The primary use case of this package is regression testing of large, serializable dictionaries, such as from an API under development. You may have parameterized test cases where you need to assert that the created dictionary stays the same, but you don\u2019t want to manually generate the expected fields and values to compare. Instead you can capture a snapshot of the serialized data and cache the result then use the cached data to check for consistency in repeated test runs. The cached files should be checked into version control, which can be very useful as documentation This package can minimize test case logic, while improving regression testing thoroughness This project was heavily inspired by the excellent pytest-recording Alternatives \u2693\ufe0e pytest-recording : this is the package I use and highly recommend for recording and replaying external API communication so that API requests only need to be made once for unit testing (i.e. recording API responses from Github\u2019s API called from a test suite) pytest-snapshot : I only found this package after already releasing a 1.0.0 version of pytest_assert_cache . This package can be more configurable with a user-specified serializer and might be a good alternative. See their documentation for more info snapshottest : This was another find after releasing a 1.0.0 version and would probably be a good alterantive for most users pytest-snapshot is much more configurable, has many more users, and is a better name I really like the ability to quickly regenerate the cached files with \u2013snapshot-update There is some interesting discussion on how best to handle fields that change between tests dirty-equals : broadly check values (i.e. assert result == {'counter': IsPositiveInt, ...} , etc.) rather than accessing and checking each field individual, which makes test easier to write and output errors easier to review Basic Example \u2693\ufe0e You\u2019ve created a new project called package_a with one file package_a/source_file.py and test tests/test_file.py \"\"\"package_a/source_file.py\"\"\" import sys from datetime import datetime from typing import Any , Dict , List , Optional from beartype import beartype from pydantic import BaseModel class User ( BaseModel ): # noqa: H601 \"\"\"Example from pydantic documentation.\"\"\" id : int # noqa: A003,VNE003 name = 'John Doe' signup_ts : Optional [ datetime ] = None friends : List [ int ] = [] @beartype def create_data ( name : str ) -> Dict : \"\"\"Arbitrary function that returns a dictionary. This demonstration uses pydantic, but any dictionary can be tested! \"\"\" return User ( id = sys . maxsize , name = name ) . dict () \"\"\"tests/test_file.py\"\"\" import pytest from package_a.source_file import create_data @pytest . mark . parametrize ( 'name' , [ 'Test Name 1' , 'Test Name 2' ]) def test_create_data ( name , assert_against_cache ): \"\"\"Basic test of create_data().\"\"\" result = create_data ( name = name ) # One could manually create the expected dictionary cache = { 'id' : 9223372036854775807 , 'signup_ts' : None , 'friends' : [], 'name' : name } assert result == cache # ---------------------------------------------------------------------------------- # Or utilize the pytest_cache_assert fixture to compare against the last cached version assert_against_cache ( result ) pytest_cache_assert will automatically create: tests/cache-assert/source_file/test_file/test_create_data-[Test Name 1].json (and test_create_data[Test Name 2].json ) for each of the parameters when first run by caching the result . Below is the example for test_create_data-[Test Name 1].json { \"_info\" : [ { \"func_args\" : { \"name\" : \"Test Name 1\" }, \"test_file\" : \"test_readme.py\" , \"test_name\" : \"test_create_data\" } ], \"_json\" : { \"friends\" : [], \"id\" : 9223372036854775807 , \"name\" : \"Test Name 1\" , \"signup_ts\" : null } } The cached JSON files must be checked into version control and if needed, can be manually edited or deleted so that they will be regenerated when the test suite is next run More Examples \u2693\ufe0e In your cached dictionary, you may have variable values with more complex logic to verify, such as dates, UUIDs, etc. These can be selectively ignored, matched-if-null, or some other user-specified check: \"\"\"tests/test_readme_more.py.\"\"\" from contextlib import suppress from datetime import datetime , timedelta from uuid import uuid4 import pytest from pytest_cache_assert import AssertRule , Wild , check_suppress , check_type def test_assert_against_cache_key_rules ( assert_against_cache ): \"\"\"Demonstrate use of `assert_rules`.\"\"\" now = datetime . now () cached_data = { 'date' : str ( now ), 'nested' : { 'uuid' : str ( uuid4 ())}, 'ignored' : { 'a' : 1 , 'b' : 2 }, } test_data = { 'date' : str ( now + timedelta ( hours = 3 )), 'nested' : { 'uuid' : str ( uuid4 ())}, 'ignored' : { 'recursively' : { 'a' : { 'b' : { 'c' : 1 }}}}, } with suppress ( AssertionError ): # Ensures that the cache file has been created assert_against_cache ( cached_data ) assert_rules = [ # To ignore values for 'ignored.a' and 'ignored.b', create a rule # Here, we use the wildcard for dictionary keys AssertRule . build_re ( pattern = [ 'ignored' , Wild . recur ()], func = check_suppress ), # Instead of suppressing, the type of data could be resolved and compared # This is useful for datetime or UUID values where we expect variability AssertRule ( pattern = 'date' , func = check_type ), AssertRule . build_re ( pattern = [ 'nested' , 'uuid' ], func = check_type ), # Any \"func\" with arguments 'old' and 'new' can be used as a rule ] # Without assert rules, an AssertionError is raised with pytest . raises ( AssertionError ): assert_against_cache ( test_data ) # But, with the custom logic, the cache assertion check will succeed assert_against_cache ( test_data , assert_rules = assert_rules ) Even More Examples \u2693\ufe0e For more example code, see the scripts directory or the tests . Customization ( beta ) \u2693\ufe0e Note: this feature is to be considered beta and may change, however, I will do my best to keep the same interfaces For 2.0.0, pytest_cache_assert was refactored to be more easily customizable with configuration options for not just the cache directory, but also for a way to override how files are named and to override how the cached test data is serialized and validated. With these configuration options, users or 3rd party packages can replace the default package behavior, such as changing the file format for data serialization ( yaml , jsonlines , etc.) and/or specifying a different serialization logic. All configuration options are available by creating a cache_assert_config fixture with the provided implementations. See AssertConfig in plugin.py for configuration options and more information always_write : Always write to the cached file so that diffs can be examined in the user\u2019s VCS. cache_dir_rel_path : String relative directory from tests/ . Default resolves to tests/assert-cache/ . cache_store : Configurable class for managing the cache representation. Default is local JSON. converters : register functions that handle conversion of unhandled types, such as pandas DataFrames validator : Custom validator for identifying and summarizing the deviations from the cache. import pytest from pytest_cache_assert.plugin import AssertConfig @pytest . fixture ( scope = 'module' ) def cache_assert_config (): return AssertConfig ( cache_dir_rel_path = 'custom/cache/dir' ) Project Status \u2693\ufe0e See the Open Issues and/or the CODE_TAG_SUMMARY . For release history, see the CHANGELOG . Planned Global Configuration Options \u2693\ufe0e These are ideas for future options that are not currently implemented, but could be if there is enough interest: PLANNED: Provide CLI arguments like pytest-recording ( request.config.getoption(\"--record-mode\") or \"none\" ) for one-time changes to configuration PLANNED: Consider filters to prevent secrets from being cached: filter_headers=[['authorization', 'id'], ['authorization', 'cookies']] (Although, you should be using a pre-commit hook and formatting the dict before passing to to the cache) TODO: Add tips from Jest on best practices \u2013 treat snapshots as code, etc. Contributing \u2693\ufe0e We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation: DEVELOPER_GUIDE STYLE_GUIDE CONTRIBUTING Code of Conduct \u2693\ufe0e We follow the Contributor Covenant Code of Conduct . Responsible Disclosure \u2693\ufe0e If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com . License \u2693\ufe0e LICENSE","title":"pytest_cache_assert"},{"location":"#pytest_cache_assert","text":"Cache assertion data to simplify regression testing of complex serializable data","title":"pytest_cache_assert"},{"location":"#installation","text":"poetry add pytest_assert_check --dev","title":"Installation"},{"location":"#usage","text":"The primary use case of this package is regression testing of large, serializable dictionaries, such as from an API under development. You may have parameterized test cases where you need to assert that the created dictionary stays the same, but you don\u2019t want to manually generate the expected fields and values to compare. Instead you can capture a snapshot of the serialized data and cache the result then use the cached data to check for consistency in repeated test runs. The cached files should be checked into version control, which can be very useful as documentation This package can minimize test case logic, while improving regression testing thoroughness This project was heavily inspired by the excellent pytest-recording","title":"Usage"},{"location":"#alternatives","text":"pytest-recording : this is the package I use and highly recommend for recording and replaying external API communication so that API requests only need to be made once for unit testing (i.e. recording API responses from Github\u2019s API called from a test suite) pytest-snapshot : I only found this package after already releasing a 1.0.0 version of pytest_assert_cache . This package can be more configurable with a user-specified serializer and might be a good alternative. See their documentation for more info snapshottest : This was another find after releasing a 1.0.0 version and would probably be a good alterantive for most users pytest-snapshot is much more configurable, has many more users, and is a better name I really like the ability to quickly regenerate the cached files with \u2013snapshot-update There is some interesting discussion on how best to handle fields that change between tests dirty-equals : broadly check values (i.e. assert result == {'counter': IsPositiveInt, ...} , etc.) rather than accessing and checking each field individual, which makes test easier to write and output errors easier to review","title":"Alternatives"},{"location":"#basic-example","text":"You\u2019ve created a new project called package_a with one file package_a/source_file.py and test tests/test_file.py \"\"\"package_a/source_file.py\"\"\" import sys from datetime import datetime from typing import Any , Dict , List , Optional from beartype import beartype from pydantic import BaseModel class User ( BaseModel ): # noqa: H601 \"\"\"Example from pydantic documentation.\"\"\" id : int # noqa: A003,VNE003 name = 'John Doe' signup_ts : Optional [ datetime ] = None friends : List [ int ] = [] @beartype def create_data ( name : str ) -> Dict : \"\"\"Arbitrary function that returns a dictionary. This demonstration uses pydantic, but any dictionary can be tested! \"\"\" return User ( id = sys . maxsize , name = name ) . dict () \"\"\"tests/test_file.py\"\"\" import pytest from package_a.source_file import create_data @pytest . mark . parametrize ( 'name' , [ 'Test Name 1' , 'Test Name 2' ]) def test_create_data ( name , assert_against_cache ): \"\"\"Basic test of create_data().\"\"\" result = create_data ( name = name ) # One could manually create the expected dictionary cache = { 'id' : 9223372036854775807 , 'signup_ts' : None , 'friends' : [], 'name' : name } assert result == cache # ---------------------------------------------------------------------------------- # Or utilize the pytest_cache_assert fixture to compare against the last cached version assert_against_cache ( result ) pytest_cache_assert will automatically create: tests/cache-assert/source_file/test_file/test_create_data-[Test Name 1].json (and test_create_data[Test Name 2].json ) for each of the parameters when first run by caching the result . Below is the example for test_create_data-[Test Name 1].json { \"_info\" : [ { \"func_args\" : { \"name\" : \"Test Name 1\" }, \"test_file\" : \"test_readme.py\" , \"test_name\" : \"test_create_data\" } ], \"_json\" : { \"friends\" : [], \"id\" : 9223372036854775807 , \"name\" : \"Test Name 1\" , \"signup_ts\" : null } } The cached JSON files must be checked into version control and if needed, can be manually edited or deleted so that they will be regenerated when the test suite is next run","title":"Basic Example"},{"location":"#more-examples","text":"In your cached dictionary, you may have variable values with more complex logic to verify, such as dates, UUIDs, etc. These can be selectively ignored, matched-if-null, or some other user-specified check: \"\"\"tests/test_readme_more.py.\"\"\" from contextlib import suppress from datetime import datetime , timedelta from uuid import uuid4 import pytest from pytest_cache_assert import AssertRule , Wild , check_suppress , check_type def test_assert_against_cache_key_rules ( assert_against_cache ): \"\"\"Demonstrate use of `assert_rules`.\"\"\" now = datetime . now () cached_data = { 'date' : str ( now ), 'nested' : { 'uuid' : str ( uuid4 ())}, 'ignored' : { 'a' : 1 , 'b' : 2 }, } test_data = { 'date' : str ( now + timedelta ( hours = 3 )), 'nested' : { 'uuid' : str ( uuid4 ())}, 'ignored' : { 'recursively' : { 'a' : { 'b' : { 'c' : 1 }}}}, } with suppress ( AssertionError ): # Ensures that the cache file has been created assert_against_cache ( cached_data ) assert_rules = [ # To ignore values for 'ignored.a' and 'ignored.b', create a rule # Here, we use the wildcard for dictionary keys AssertRule . build_re ( pattern = [ 'ignored' , Wild . recur ()], func = check_suppress ), # Instead of suppressing, the type of data could be resolved and compared # This is useful for datetime or UUID values where we expect variability AssertRule ( pattern = 'date' , func = check_type ), AssertRule . build_re ( pattern = [ 'nested' , 'uuid' ], func = check_type ), # Any \"func\" with arguments 'old' and 'new' can be used as a rule ] # Without assert rules, an AssertionError is raised with pytest . raises ( AssertionError ): assert_against_cache ( test_data ) # But, with the custom logic, the cache assertion check will succeed assert_against_cache ( test_data , assert_rules = assert_rules )","title":"More Examples"},{"location":"#even-more-examples","text":"For more example code, see the scripts directory or the tests .","title":"Even More Examples"},{"location":"#customization-beta","text":"Note: this feature is to be considered beta and may change, however, I will do my best to keep the same interfaces For 2.0.0, pytest_cache_assert was refactored to be more easily customizable with configuration options for not just the cache directory, but also for a way to override how files are named and to override how the cached test data is serialized and validated. With these configuration options, users or 3rd party packages can replace the default package behavior, such as changing the file format for data serialization ( yaml , jsonlines , etc.) and/or specifying a different serialization logic. All configuration options are available by creating a cache_assert_config fixture with the provided implementations. See AssertConfig in plugin.py for configuration options and more information always_write : Always write to the cached file so that diffs can be examined in the user\u2019s VCS. cache_dir_rel_path : String relative directory from tests/ . Default resolves to tests/assert-cache/ . cache_store : Configurable class for managing the cache representation. Default is local JSON. converters : register functions that handle conversion of unhandled types, such as pandas DataFrames validator : Custom validator for identifying and summarizing the deviations from the cache. import pytest from pytest_cache_assert.plugin import AssertConfig @pytest . fixture ( scope = 'module' ) def cache_assert_config (): return AssertConfig ( cache_dir_rel_path = 'custom/cache/dir' )","title":"Customization (beta)"},{"location":"#project-status","text":"See the Open Issues and/or the CODE_TAG_SUMMARY . For release history, see the CHANGELOG .","title":"Project Status"},{"location":"#planned-global-configuration-options","text":"These are ideas for future options that are not currently implemented, but could be if there is enough interest: PLANNED: Provide CLI arguments like pytest-recording ( request.config.getoption(\"--record-mode\") or \"none\" ) for one-time changes to configuration PLANNED: Consider filters to prevent secrets from being cached: filter_headers=[['authorization', 'id'], ['authorization', 'cookies']] (Although, you should be using a pre-commit hook and formatting the dict before passing to to the cache) TODO: Add tips from Jest on best practices \u2013 treat snapshots as code, etc.","title":"Planned Global Configuration Options"},{"location":"#contributing","text":"We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation: DEVELOPER_GUIDE STYLE_GUIDE CONTRIBUTING","title":"Contributing"},{"location":"#code-of-conduct","text":"We follow the Contributor Covenant Code of Conduct .","title":"Code of Conduct"},{"location":"#responsible-disclosure","text":"If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com .","title":"Responsible Disclosure"},{"location":"#license","text":"LICENSE","title":"License"},{"location":"docs/CHANGELOG/","text":"Unreleased \u2693\ufe0e Fix \u2693\ufe0e remove dump of raw data in error message serialize bytes by passing to str serialize datetime by default Refactor \u2693\ufe0e reduce serializer complexity 3.0.4 (2022-10-08) \u2693\ufe0e Fix \u2693\ufe0e serialize all classes 3.0.3 (2022-10-06) \u2693\ufe0e Fix \u2693\ufe0e support arbitrary class serialization escape slashes in filepaths 3.0.2 (2022-10-04) \u2693\ufe0e Fix \u2693\ufe0e write metadata on first pass and autouse custom config pin maximum importlib-metadata for poetry publish 3.0.1 (2022-10-04) \u2693\ufe0e Fix \u2693\ufe0e register the AssertConfig when set only set override fixture once (in client tests) move generic memory serializer after type lookup support in-memory assertion checking handle serializing MagicMock Refactor \u2693\ufe0e type ignore comment removal switch to BaseModel and Protocol 3.0.0 (2022-09-25) \u2693\ufe0e Feat \u2693\ufe0e add missing Wild.recur initiaiize Wild class and rename KeyRule to AssertRule add serializer to store only relative paths begin supporting string-based KeyRules! even better error messages start switch from dictdiffer to deepdiff start migration of attrs to pydantic migrate from pendulum to arrow Fix \u2693\ufe0e replace punq with dictionary config for failing tests remove casts because they break the tests cast to Interface and not Protocol resolve list regex matching rules determine how to match regex for nested paths continue to update tests for change in pattern syntax start removing the Wildcards and legacy KeyRules Refactor \u2693\ufe0e considered ssort, but blocked by https://github.com/bwhmather/ssort/issues/70 last fix to restore mypy passing correct type ignore comments additional changes to pass type checks better support mypy add pydantic validators to custom types by default nest the caches by test file use suppress and remove loguru from pkg 2.0.0 (2022-05-01) \u2693\ufe0e Feat \u2693\ufe0e make numpy, pandas, and pydantic optionally serialize replace preconvert with custom registration logic #3 : implement always_write initialize configurable list of converters implement DictDifferValidator implement LocalJSONCacheStore initialize new customization features Fix \u2693\ufe0e on first write use test_data for comparison order of flow for parsing diff result handling s3 serialization and remove returns s3 serialization needs to catch all objects try to fix s3 serialization remove type checking entirely for str str can\u2019t be type-checked resolve local test failures after initial refactor commitizen changed Cerberus dependency version Refactor \u2693\ufe0e always override the converter support an optional Path replace TEST_DATA_TYPE with Any switch to preconvert internally encapsulate JSON logic combine into single CacheStore representation separate functional logic from state for DictDiff remove optional validator argument decouple AssertConfig from plugin 1.3.5 (2022-03-03) \u2693\ufe0e Fix \u2693\ufe0e another attempt at fixing edge case for unknown class 1.3.4 (2022-03-03) \u2693\ufe0e Fix \u2693\ufe0e class is only in the type string 1.3.3 (2022-03-03) \u2693\ufe0e Fix \u2693\ufe0e handle edge cases with serializing classes 1.3.2 (2022-03-01) \u2693\ufe0e Fix \u2693\ufe0e debug recursive serialization for diffing handle one-level of recursion in lists 1.3.1 (2022-02-27) \u2693\ufe0e Fix \u2693\ufe0e correct type validation of AssertConfig ser_rules 1.3.0 (2022-02-27) \u2693\ufe0e Feat \u2693\ufe0e improve configurability with AssertConfig introduce internally configurable punq 1.2.1 (2022-02-27) \u2693\ufe0e Fix \u2693\ufe0e support Paths 1.2.0 (2022-02-27) \u2693\ufe0e Feat \u2693\ufe0e WIP serializer to support functions copier update. Add Github Actions Fix \u2693\ufe0e implement serializer before diffing failing tests and run doit Refactor \u2693\ufe0e use next generation attrs syntax 1.1.1 (2022-02-18) \u2693\ufe0e Fix \u2693\ufe0e show the changelog on PyPi Refactor \u2693\ufe0e drop 2021 prefix on tags 1.1.0 (2022-02-18) \u2693\ufe0e Feat \u2693\ufe0e new assert_against_dict for in-memory comparison add support for comparing date-times Fix \u2693\ufe0e argument order issues in main datetime comparison logic Refactor \u2693\ufe0e use beartype\u2019s typing imports 1.0.0 (2021-11-02) \u2693\ufe0e Feat \u2693\ufe0e improve serialization Fix \u2693\ufe0e correctly implement an optional fixture make config fixture optional 1.0.0rc0 (2021-11-02) \u2693\ufe0e Feat \u2693\ufe0e support comparison of lists always write metadata as a list customizable cache directory support lists of dictionaries replace asterisk string with Wildcard enum support UUID in check_type Fix \u2693\ufe0e support dictionary keys with dots add CNAME for custom subdomain add missing check_imports file Refactor \u2693\ufe0e code cleanup & documentation updates simplify merge_metadata logic serialize the func_args metadata recursively improve code quality of _raw_diff 0.1.0 (2021-10-31) \u2693\ufe0e Feat \u2693\ufe0e implement key rules implement dictdiffer wrapper initialize decoupled differ and error message (WIP) use dictdiffer for quick fix for assertion messages resolve cache file name based on pytest metadata initial attempt at pytest plugin initialize package code and tests start with Readme (RDD) initialized project with copier Fix \u2693\ufe0e add tests and verify correctness of KeyRule use full name instead of custom indexing for cache use 2-spaces on JSON for pre-commit reduce stored metadata and check args re-run \u201cpoetry install\u201d after entrypoint changes Refactor \u2693\ufe0e rename checks to main rename check_assert to assert_against_cache & update README drop transformer and match_precision update notes and implementation plans","title":"Docs"},{"location":"docs/CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"docs/CHANGELOG/#fix","text":"remove dump of raw data in error message serialize bytes by passing to str serialize datetime by default","title":"Fix"},{"location":"docs/CHANGELOG/#refactor","text":"reduce serializer complexity","title":"Refactor"},{"location":"docs/CHANGELOG/#304-2022-10-08","text":"","title":"3.0.4 (2022-10-08)"},{"location":"docs/CHANGELOG/#fix_1","text":"serialize all classes","title":"Fix"},{"location":"docs/CHANGELOG/#303-2022-10-06","text":"","title":"3.0.3 (2022-10-06)"},{"location":"docs/CHANGELOG/#fix_2","text":"support arbitrary class serialization escape slashes in filepaths","title":"Fix"},{"location":"docs/CHANGELOG/#302-2022-10-04","text":"","title":"3.0.2 (2022-10-04)"},{"location":"docs/CHANGELOG/#fix_3","text":"write metadata on first pass and autouse custom config pin maximum importlib-metadata for poetry publish","title":"Fix"},{"location":"docs/CHANGELOG/#301-2022-10-04","text":"","title":"3.0.1 (2022-10-04)"},{"location":"docs/CHANGELOG/#fix_4","text":"register the AssertConfig when set only set override fixture once (in client tests) move generic memory serializer after type lookup support in-memory assertion checking handle serializing MagicMock","title":"Fix"},{"location":"docs/CHANGELOG/#refactor_1","text":"type ignore comment removal switch to BaseModel and Protocol","title":"Refactor"},{"location":"docs/CHANGELOG/#300-2022-09-25","text":"","title":"3.0.0 (2022-09-25)"},{"location":"docs/CHANGELOG/#feat","text":"add missing Wild.recur initiaiize Wild class and rename KeyRule to AssertRule add serializer to store only relative paths begin supporting string-based KeyRules! even better error messages start switch from dictdiffer to deepdiff start migration of attrs to pydantic migrate from pendulum to arrow","title":"Feat"},{"location":"docs/CHANGELOG/#fix_5","text":"replace punq with dictionary config for failing tests remove casts because they break the tests cast to Interface and not Protocol resolve list regex matching rules determine how to match regex for nested paths continue to update tests for change in pattern syntax start removing the Wildcards and legacy KeyRules","title":"Fix"},{"location":"docs/CHANGELOG/#refactor_2","text":"considered ssort, but blocked by https://github.com/bwhmather/ssort/issues/70 last fix to restore mypy passing correct type ignore comments additional changes to pass type checks better support mypy add pydantic validators to custom types by default nest the caches by test file use suppress and remove loguru from pkg","title":"Refactor"},{"location":"docs/CHANGELOG/#200-2022-05-01","text":"","title":"2.0.0 (2022-05-01)"},{"location":"docs/CHANGELOG/#feat_1","text":"make numpy, pandas, and pydantic optionally serialize replace preconvert with custom registration logic #3 : implement always_write initialize configurable list of converters implement DictDifferValidator implement LocalJSONCacheStore initialize new customization features","title":"Feat"},{"location":"docs/CHANGELOG/#fix_6","text":"on first write use test_data for comparison order of flow for parsing diff result handling s3 serialization and remove returns s3 serialization needs to catch all objects try to fix s3 serialization remove type checking entirely for str str can\u2019t be type-checked resolve local test failures after initial refactor commitizen changed Cerberus dependency version","title":"Fix"},{"location":"docs/CHANGELOG/#refactor_3","text":"always override the converter support an optional Path replace TEST_DATA_TYPE with Any switch to preconvert internally encapsulate JSON logic combine into single CacheStore representation separate functional logic from state for DictDiff remove optional validator argument decouple AssertConfig from plugin","title":"Refactor"},{"location":"docs/CHANGELOG/#135-2022-03-03","text":"","title":"1.3.5 (2022-03-03)"},{"location":"docs/CHANGELOG/#fix_7","text":"another attempt at fixing edge case for unknown class","title":"Fix"},{"location":"docs/CHANGELOG/#134-2022-03-03","text":"","title":"1.3.4 (2022-03-03)"},{"location":"docs/CHANGELOG/#fix_8","text":"class is only in the type string","title":"Fix"},{"location":"docs/CHANGELOG/#133-2022-03-03","text":"","title":"1.3.3 (2022-03-03)"},{"location":"docs/CHANGELOG/#fix_9","text":"handle edge cases with serializing classes","title":"Fix"},{"location":"docs/CHANGELOG/#132-2022-03-01","text":"","title":"1.3.2 (2022-03-01)"},{"location":"docs/CHANGELOG/#fix_10","text":"debug recursive serialization for diffing handle one-level of recursion in lists","title":"Fix"},{"location":"docs/CHANGELOG/#131-2022-02-27","text":"","title":"1.3.1 (2022-02-27)"},{"location":"docs/CHANGELOG/#fix_11","text":"correct type validation of AssertConfig ser_rules","title":"Fix"},{"location":"docs/CHANGELOG/#130-2022-02-27","text":"","title":"1.3.0 (2022-02-27)"},{"location":"docs/CHANGELOG/#feat_2","text":"improve configurability with AssertConfig introduce internally configurable punq","title":"Feat"},{"location":"docs/CHANGELOG/#121-2022-02-27","text":"","title":"1.2.1 (2022-02-27)"},{"location":"docs/CHANGELOG/#fix_12","text":"support Paths","title":"Fix"},{"location":"docs/CHANGELOG/#120-2022-02-27","text":"","title":"1.2.0 (2022-02-27)"},{"location":"docs/CHANGELOG/#feat_3","text":"WIP serializer to support functions copier update. Add Github Actions","title":"Feat"},{"location":"docs/CHANGELOG/#fix_13","text":"implement serializer before diffing failing tests and run doit","title":"Fix"},{"location":"docs/CHANGELOG/#refactor_4","text":"use next generation attrs syntax","title":"Refactor"},{"location":"docs/CHANGELOG/#111-2022-02-18","text":"","title":"1.1.1 (2022-02-18)"},{"location":"docs/CHANGELOG/#fix_14","text":"show the changelog on PyPi","title":"Fix"},{"location":"docs/CHANGELOG/#refactor_5","text":"drop 2021 prefix on tags","title":"Refactor"},{"location":"docs/CHANGELOG/#110-2022-02-18","text":"","title":"1.1.0 (2022-02-18)"},{"location":"docs/CHANGELOG/#feat_4","text":"new assert_against_dict for in-memory comparison add support for comparing date-times","title":"Feat"},{"location":"docs/CHANGELOG/#fix_15","text":"argument order issues in main datetime comparison logic","title":"Fix"},{"location":"docs/CHANGELOG/#refactor_6","text":"use beartype\u2019s typing imports","title":"Refactor"},{"location":"docs/CHANGELOG/#100-2021-11-02","text":"","title":"1.0.0 (2021-11-02)"},{"location":"docs/CHANGELOG/#feat_5","text":"improve serialization","title":"Feat"},{"location":"docs/CHANGELOG/#fix_16","text":"correctly implement an optional fixture make config fixture optional","title":"Fix"},{"location":"docs/CHANGELOG/#100rc0-2021-11-02","text":"","title":"1.0.0rc0 (2021-11-02)"},{"location":"docs/CHANGELOG/#feat_6","text":"support comparison of lists always write metadata as a list customizable cache directory support lists of dictionaries replace asterisk string with Wildcard enum support UUID in check_type","title":"Feat"},{"location":"docs/CHANGELOG/#fix_17","text":"support dictionary keys with dots add CNAME for custom subdomain add missing check_imports file","title":"Fix"},{"location":"docs/CHANGELOG/#refactor_7","text":"code cleanup & documentation updates simplify merge_metadata logic serialize the func_args metadata recursively improve code quality of _raw_diff","title":"Refactor"},{"location":"docs/CHANGELOG/#010-2021-10-31","text":"","title":"0.1.0 (2021-10-31)"},{"location":"docs/CHANGELOG/#feat_7","text":"implement key rules implement dictdiffer wrapper initialize decoupled differ and error message (WIP) use dictdiffer for quick fix for assertion messages resolve cache file name based on pytest metadata initial attempt at pytest plugin initialize package code and tests start with Readme (RDD) initialized project with copier","title":"Feat"},{"location":"docs/CHANGELOG/#fix_18","text":"add tests and verify correctness of KeyRule use full name instead of custom indexing for cache use 2-spaces on JSON for pre-commit reduce stored metadata and check args re-run \u201cpoetry install\u201d after entrypoint changes","title":"Fix"},{"location":"docs/CHANGELOG/#refactor_8","text":"rename checks to main rename check_assert to assert_against_cache & update README drop transformer and match_precision update notes and implementation plans","title":"Refactor"},{"location":"docs/CODE_TAG_SUMMARY/","text":"Task Summary \u2693\ufe0e Auto-Generated by calcipy Type Comment Last Edit Source File FIXME Needs to support mkdocs: https://github.com/executablebooks/mdformat/issues/317 2022-09-17 .pre-commit-config.yaml:48 PLANNED newest version fails on positional argument errors: https://github.com/tox-dev/pyproject-fmt 2022-09-16 .pre-commit-config.yaml:68 TODO Update from: https://github.com/PyCQA/pylint/blob/main/examples/pylintrc 2022-09-16 .pylintrc:1 PLANNED Provide CLI arguments like pytest-recording ( request.config.getoption(\"--record-mode\") or \"none\" ) for one-time changes to configuration 2021-11-02 docs/README.md:199 PLANNED Consider filters to prevent secrets from being cached: filter_headers=[['authorization', 'id'], ['authorization', 'cookies']] (Although, you should be using a pre-commit hook and formatting the dict before passing to to the cache) 2022-09-25 docs/README.md:200 TODO Add tips from Jest on best practices \u2013 treat snapshots as code, etc. 2022-09-25 docs/README.md:201 PLANNED Faster to LBYL or EAFP? 2022-09-22 pytest_cache_assert/_check_assert/serializer.py:110 FIXME Replace with programmatic imports? Maybe explicit imports to check backward compatibility of public API? 2022-02-18 scripts/check_imports.py:7 TODO Add tests for additional types: st.binary(), etc. 2022-03-07 tests/test_main.py:160 Found code tags for FIXME (2), TODO (3), PLANNED (4)","title":"Task Summary"},{"location":"docs/CODE_TAG_SUMMARY/#task-summary","text":"Auto-Generated by calcipy Type Comment Last Edit Source File FIXME Needs to support mkdocs: https://github.com/executablebooks/mdformat/issues/317 2022-09-17 .pre-commit-config.yaml:48 PLANNED newest version fails on positional argument errors: https://github.com/tox-dev/pyproject-fmt 2022-09-16 .pre-commit-config.yaml:68 TODO Update from: https://github.com/PyCQA/pylint/blob/main/examples/pylintrc 2022-09-16 .pylintrc:1 PLANNED Provide CLI arguments like pytest-recording ( request.config.getoption(\"--record-mode\") or \"none\" ) for one-time changes to configuration 2021-11-02 docs/README.md:199 PLANNED Consider filters to prevent secrets from being cached: filter_headers=[['authorization', 'id'], ['authorization', 'cookies']] (Although, you should be using a pre-commit hook and formatting the dict before passing to to the cache) 2022-09-25 docs/README.md:200 TODO Add tips from Jest on best practices \u2013 treat snapshots as code, etc. 2022-09-25 docs/README.md:201 PLANNED Faster to LBYL or EAFP? 2022-09-22 pytest_cache_assert/_check_assert/serializer.py:110 FIXME Replace with programmatic imports? Maybe explicit imports to check backward compatibility of public API? 2022-02-18 scripts/check_imports.py:7 TODO Add tests for additional types: st.binary(), etc. 2022-03-07 tests/test_main.py:160 Found code tags for FIXME (2), TODO (3), PLANNED (4)","title":"Task Summary"},{"location":"docs/DEVELOPER_GUIDE/","text":"Developer Notes \u2693\ufe0e Local Development \u2693\ufe0e git clone https://github.com/kyleking/pytest_cache_assert.git cd pytest_cache_assert poetry install # See the available tasks poetry run doit list # Run the default task list (lint, auto-format, test coverage, etc.) poetry run doit --continue # Make code changes and run specific tasks as needed: poetry run doit run test Publishing \u2693\ufe0e For testing, create an account on TestPyPi . Replace ... with the API token generated on TestPyPi or PyPi respectively poetry config repositories.testpypi https://test.pypi.org/legacy/ poetry config pypi-token.testpypi ... poetry run doit run publish_test_pypi # If you didn't configure a token, you will need to provide your username and password to publish To publish to the real PyPi poetry config pypi-token.pypi ... poetry run doit run publish # For a full release, triple check the default tasks, increment the version, rebuild documentation (twice), and publish! poetry run doit run --continue poetry run doit run cl_bump lock document deploy_docs publish # For pre-releases use cl_bump_pre poetry run doit run cl_bump_pre -p rc poetry run doit run lock document deploy_docs publish Current Status \u2693\ufe0e File Statements Missing Excluded Coverage pytest_cache_assert/__init__.py 9 0 0 100.0% pytest_cache_assert/_check_assert/__init__.py 0 0 0 100.0% pytest_cache_assert/_check_assert/assert_config.py 19 0 0 100.0% pytest_cache_assert/_check_assert/assert_rules.py 87 8 0 90.8% pytest_cache_assert/_check_assert/cache_store.py 44 6 0 86.4% pytest_cache_assert/_check_assert/caching.py 36 0 0 100.0% pytest_cache_assert/_check_assert/config.py 26 0 0 100.0% pytest_cache_assert/_check_assert/constants.py 11 0 0 100.0% pytest_cache_assert/_check_assert/converter.py 6 0 0 100.0% pytest_cache_assert/_check_assert/differ.py 41 2 0 95.1% pytest_cache_assert/_check_assert/error_message.py 20 0 0 100.0% pytest_cache_assert/_check_assert/serializer.py 120 7 0 94.2% pytest_cache_assert/_check_assert/validator.py 23 3 0 87.0% pytest_cache_assert/main.py 27 0 0 100.0% pytest_cache_assert/plugin.py 44 2 0 95.5% Totals 513 28 0 94.5% Generated on: 2022-10-18","title":"Developer Notes"},{"location":"docs/DEVELOPER_GUIDE/#developer-notes","text":"","title":"Developer Notes"},{"location":"docs/DEVELOPER_GUIDE/#local-development","text":"git clone https://github.com/kyleking/pytest_cache_assert.git cd pytest_cache_assert poetry install # See the available tasks poetry run doit list # Run the default task list (lint, auto-format, test coverage, etc.) poetry run doit --continue # Make code changes and run specific tasks as needed: poetry run doit run test","title":"Local Development"},{"location":"docs/DEVELOPER_GUIDE/#publishing","text":"For testing, create an account on TestPyPi . Replace ... with the API token generated on TestPyPi or PyPi respectively poetry config repositories.testpypi https://test.pypi.org/legacy/ poetry config pypi-token.testpypi ... poetry run doit run publish_test_pypi # If you didn't configure a token, you will need to provide your username and password to publish To publish to the real PyPi poetry config pypi-token.pypi ... poetry run doit run publish # For a full release, triple check the default tasks, increment the version, rebuild documentation (twice), and publish! poetry run doit run --continue poetry run doit run cl_bump lock document deploy_docs publish # For pre-releases use cl_bump_pre poetry run doit run cl_bump_pre -p rc poetry run doit run lock document deploy_docs publish","title":"Publishing"},{"location":"docs/DEVELOPER_GUIDE/#current-status","text":"File Statements Missing Excluded Coverage pytest_cache_assert/__init__.py 9 0 0 100.0% pytest_cache_assert/_check_assert/__init__.py 0 0 0 100.0% pytest_cache_assert/_check_assert/assert_config.py 19 0 0 100.0% pytest_cache_assert/_check_assert/assert_rules.py 87 8 0 90.8% pytest_cache_assert/_check_assert/cache_store.py 44 6 0 86.4% pytest_cache_assert/_check_assert/caching.py 36 0 0 100.0% pytest_cache_assert/_check_assert/config.py 26 0 0 100.0% pytest_cache_assert/_check_assert/constants.py 11 0 0 100.0% pytest_cache_assert/_check_assert/converter.py 6 0 0 100.0% pytest_cache_assert/_check_assert/differ.py 41 2 0 95.1% pytest_cache_assert/_check_assert/error_message.py 20 0 0 100.0% pytest_cache_assert/_check_assert/serializer.py 120 7 0 94.2% pytest_cache_assert/_check_assert/validator.py 23 3 0 87.0% pytest_cache_assert/main.py 27 0 0 100.0% pytest_cache_assert/plugin.py 44 2 0 95.5% Totals 513 28 0 94.5% Generated on: 2022-10-18","title":"Current Status"},{"location":"docs/STYLE_GUIDE/","text":"Personal Style Guides \u2693\ufe0e Git \u2693\ufe0e We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver . For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below. Commitizen Types and Scopes \u2693\ufe0e type(scope): description Types fix : A bug fix feat : A new feature docs : Documentation-only changes (code comments, separate docs) style : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons) perf : A code change that improves performance refactor : A change to production code that is not a fix , feat , or perf test : Adding missing or correcting existing tests build : Changes that affect the build system or external dependencies ci : Changes to our CI configuration files and scripts A ! can be used to indicate a breaking change ( refactor!: drop support for Node 6 ) SemVer Rules Based on commit type, the version will be auto-incremented: fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR Scopes A Class, File name, Issue Number, other appropriate noun. As examples: build(poetry): bump requests to v3 or style(#32): add missing type annotations Tips What if a commit fits multiple types? Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes Use git rebase -i to fix commit names prior to merging if incorrect types/scopes are used Git Description Guidelines \u2693\ufe0e Commit message guidelines Full sentence with verb ( lowercase ) and concise description. Below are modified examples for Conventional Commits fix(roles): bug in admin role permissions feat(ui): implement new button design build(pip): upgrade package to remove vulnerabilities refactor: file structure to improve code readability perf(cli): rewrite methods feat(api): endpoints to implement new customer dashboard How to write a good commit message A diff will tell you what changed, but only the commit message can properly tell you why. Keep in mind: This has all been said before . From the seven rules of a great Git commit message: Try for 50 characters, but consider 72 the hard limit Use the body to explain what and why vs. how Issue Labels and Milestones \u2693\ufe0e Personal Guide For Issue Labels, see labels.yml Milestones Current Tasks : main milestone ( name could change based on a specific project, sprint, or month ) Next Tasks Blue Sky Research [Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each \u201cit is much more helpful to see the status and type of all issues at a glance.\u201d One of each: Status: \u2026 Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed Type: \u2026 Bug, Maintenance, Question, Enhancement Priority: \u2026 Critical, High, Medium, Low [Britecharts](https://britecharts.github.io/britecharts/github-labels.html) Status: \u2026 On Review \u2013 Request that we are pondering if including or not Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed Needs Design \u2013 Feature that needs a design Ready to Go \u2013 Issue that has been defined and is ready to get started with In Progress \u2013 Issue that is being worked on right now. Completed \u2013 Finished feature or fix Type: \u2026 Bug \u2013 An unexpected problem or unintended behavior Feature \u2013 A new feature request Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements Documentation \u2013 A documentation improvement task Question \u2013 An issue or PR that needs more information or a user question Not Included Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming [Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html) Milestone Overview What are we doing right now? What aren\u2019t we doing right now? 2a. Stuff we\u2019ll probably do soon 2b. Stuff we probably won\u2019t do soon What aren\u2019t we sure about? Milestone Descriptions Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration. Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone. We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone. Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored. What aren\u2019t we sure about?: issues with no milestone. Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets \u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d External Links \u2693\ufe0e TODO: Revisit Git: The Simple Guide Commit Messages and why use the present tense Github\u2019s Advice on Github Most Comprehensive Guide Git Pro Book (free) Bash Tab-Completion Snippet Python \u2693\ufe0e TODO: Revisit Python Style Guides https://gist.github.com/sloria/7001839 http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/ https://innoq.github.io/cards42org_en/ https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide https://www.python.org/doc/humor/ https://docs.python-guide.org/writing/reading/ https://realpython.com/python-refactoring/ ADRs \u2693\ufe0e TODO: Revisit Examples https://github.com/pawamoy/mkdocstrings/issues/28 <\u2013 Links \u2013>","title":"Personal Style Guides"},{"location":"docs/STYLE_GUIDE/#personal-style-guides","text":"","title":"Personal Style Guides"},{"location":"docs/STYLE_GUIDE/#git","text":"We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver . For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below.","title":"Git"},{"location":"docs/STYLE_GUIDE/#commitizen-types-and-scopes","text":"type(scope): description Types fix : A bug fix feat : A new feature docs : Documentation-only changes (code comments, separate docs) style : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons) perf : A code change that improves performance refactor : A change to production code that is not a fix , feat , or perf test : Adding missing or correcting existing tests build : Changes that affect the build system or external dependencies ci : Changes to our CI configuration files and scripts A ! can be used to indicate a breaking change ( refactor!: drop support for Node 6 ) SemVer Rules Based on commit type, the version will be auto-incremented: fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR Scopes A Class, File name, Issue Number, other appropriate noun. As examples: build(poetry): bump requests to v3 or style(#32): add missing type annotations Tips What if a commit fits multiple types? Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes Use git rebase -i to fix commit names prior to merging if incorrect types/scopes are used","title":"Commitizen Types and Scopes"},{"location":"docs/STYLE_GUIDE/#git-description-guidelines","text":"Commit message guidelines Full sentence with verb ( lowercase ) and concise description. Below are modified examples for Conventional Commits fix(roles): bug in admin role permissions feat(ui): implement new button design build(pip): upgrade package to remove vulnerabilities refactor: file structure to improve code readability perf(cli): rewrite methods feat(api): endpoints to implement new customer dashboard How to write a good commit message A diff will tell you what changed, but only the commit message can properly tell you why. Keep in mind: This has all been said before . From the seven rules of a great Git commit message: Try for 50 characters, but consider 72 the hard limit Use the body to explain what and why vs. how","title":"Git Description Guidelines"},{"location":"docs/STYLE_GUIDE/#issue-labels-and-milestones","text":"Personal Guide For Issue Labels, see labels.yml Milestones Current Tasks : main milestone ( name could change based on a specific project, sprint, or month ) Next Tasks Blue Sky Research [Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each \u201cit is much more helpful to see the status and type of all issues at a glance.\u201d One of each: Status: \u2026 Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed Type: \u2026 Bug, Maintenance, Question, Enhancement Priority: \u2026 Critical, High, Medium, Low [Britecharts](https://britecharts.github.io/britecharts/github-labels.html) Status: \u2026 On Review \u2013 Request that we are pondering if including or not Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed Needs Design \u2013 Feature that needs a design Ready to Go \u2013 Issue that has been defined and is ready to get started with In Progress \u2013 Issue that is being worked on right now. Completed \u2013 Finished feature or fix Type: \u2026 Bug \u2013 An unexpected problem or unintended behavior Feature \u2013 A new feature request Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements Documentation \u2013 A documentation improvement task Question \u2013 An issue or PR that needs more information or a user question Not Included Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming [Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html) Milestone Overview What are we doing right now? What aren\u2019t we doing right now? 2a. Stuff we\u2019ll probably do soon 2b. Stuff we probably won\u2019t do soon What aren\u2019t we sure about? Milestone Descriptions Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration. Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone. We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone. Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored. What aren\u2019t we sure about?: issues with no milestone. Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets \u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d","title":"Issue Labels and Milestones"},{"location":"docs/STYLE_GUIDE/#external-links","text":"TODO: Revisit Git: The Simple Guide Commit Messages and why use the present tense Github\u2019s Advice on Github Most Comprehensive Guide Git Pro Book (free) Bash Tab-Completion Snippet","title":"External Links"},{"location":"docs/STYLE_GUIDE/#python","text":"TODO: Revisit Python Style Guides https://gist.github.com/sloria/7001839 http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/ https://innoq.github.io/cards42org_en/ https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide https://www.python.org/doc/humor/ https://docs.python-guide.org/writing/reading/ https://realpython.com/python-refactoring/","title":"Python"},{"location":"docs/STYLE_GUIDE/#adrs","text":"TODO: Revisit Examples https://github.com/pawamoy/mkdocstrings/issues/28 <\u2013 Links \u2013>","title":"ADRs"},{"location":"modules/pytest_cache_assert/_code_diagrams/","text":"Code Diagrams \u2693\ufe0e Auto-generated with pylint-pyreverse Packages \u2693\ufe0e Full Size Classes \u2693\ufe0e Full Size","title":"Pytest cache assert"},{"location":"modules/pytest_cache_assert/_code_diagrams/#code-diagrams","text":"Auto-generated with pylint-pyreverse","title":"Code Diagrams"},{"location":"modules/pytest_cache_assert/_code_diagrams/#packages","text":"Full Size","title":"Packages"},{"location":"modules/pytest_cache_assert/_code_diagrams/#classes","text":"Full Size","title":"Classes"},{"location":"reference/SUMMARY/","text":"","title":"Reference"}]}